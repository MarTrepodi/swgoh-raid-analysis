---
// This component renders the detailed raid results table
export interface Props {
  allPlayerStats: any[];
  raidData: any[];
}

const { allPlayerStats, raidData } = Astro.props;

// Helper function to get percentage class (matches the JavaScript version)
function getPercentageClass(percentage: number): string {
  if (percentage < 70) return 'status-poor';
  if (percentage < 80) return 'status-warning';
  if (percentage < 95) return 'status-good';
  return 'status-excellent';
}

// Use only the last 5 raids for the detailed table
const last5RaidData = raidData.slice(-5);
const last5RaidDates = last5RaidData.map((raid: any) => raid.date).sort((a: string, b: string) => new Date(a).getTime() - new Date(b).getTime());

// Convert player stats to format needed for raid table
const allPlayersData = allPlayerStats.map((playerStat: any) => {
  const playerData = {
    name: playerStat.name,
    participation: playerStat.participation,
    avgScore: playerStat.avgScore,
    avgEstimate: playerStat.avgEstimate,
    maxEstimated: playerStat.maxEstimated,
    bestScore: playerStat.bestScore,
    efficiency: playerStat.efficiency,
    raids: {} as Record<string, number | null | undefined>
  };
  
  // Map last 5 raids data - only add entries where player was in guild
  const raidsMap: Record<string, number | null | undefined> = {};
  playerStat.last5Raids.forEach((raidEntry: any) => {
    raidsMap[raidEntry.date] = raidEntry.participated ? raidEntry.score : null;
  });
  
  // For dates where player has no entry, set to undefined (not in guild)
  last5RaidDates.forEach((raidDate: string) => {
    if (!(raidDate in raidsMap)) {
      raidsMap[raidDate] = undefined;
    }
  });
  
  playerData.raids = raidsMap;
  return playerData;
});

// Calculate averages for last 5 raids only (only from players who have data for that raid)
const raidAverages: Record<string, number> = {};
for (let raidDate of last5RaidDates) {
  let totalScore = 0;
  let playerCount = 0;
  
  for (let player of allPlayersData) {
    const score = player.raids[raidDate];
    if (score !== undefined && score !== null) {
      totalScore += score;
      playerCount++;
    }
  }
  
  raidAverages[raidDate] = playerCount > 0 ? totalScore / playerCount : 0;
}

// Calculate totals for footer
const totalAvgEstimate = allPlayersData.length > 0 ? 
  (allPlayersData.reduce((sum: number, p: any) => sum + p.avgEstimate, 0) / allPlayersData.length) : 0;

// Calculate total scores for each raid (only players who have data for that raid)
const raidTotals: Record<string, number> = {};
for (let raidDate of last5RaidDates) {
  let total = 0;
  for (let player of allPlayersData) {
    const score = player.raids[raidDate];
    if (score !== undefined && score !== null) {
      total += score;
    }
  }
  raidTotals[raidDate] = total;
}

// Calculate average Max/Est percentage
const avgMaxEstPercentage = allPlayersData.length > 0 ? 
  (allPlayersData.reduce((sum: number, p: any) => {
    const percentage = p.avgEstimate > 0 ? ((p.bestScore / p.avgEstimate) * 100) : 0;
    return sum + percentage;
  }, 0) / allPlayersData.length) : 0;

// Format date for display - keep ISO format
const formatDate = (dateStr: string) => {
  return dateStr; // Keep original ISO format like 2025-07-09
};

// Sort players by average estimate (default)
const sortedPlayersData = [...allPlayersData].sort((a: any, b: any) => b.avgEstimate - a.avgEstimate);
---

<div class="glass-card p-3 sm:p-5 mt-6 sm:mt-8">
  <h2 class="text-heading mb-3 sm:mb-5 text-center text-sm sm:text-xl">ðŸ“Š Detailed Raid Results (Last 5 Raids)</h2>
  <div class="mb-3 sm:mb-5 flex flex-col sm:flex-row gap-3 sm:gap-5 items-stretch sm:items-center">
    <label class="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-2">
      <span class="text-heading font-bold text-sm sm:text-base">Sort by:</span>
      <select id="raidTableSort" onchange="sortRaidTable()" class="form-control">
        <option value="avgEstimate">Average Estimate</option>
        <option value="maxEst">Max/Est %</option>
        <option value="name">Player Name</option>
      </select>
    </label>
  </div>
  <div class="mobile-scroll-hint">ðŸ‘ˆ Swipe to see all raid dates</div>
  <div class="overflow-x-auto">
    <table id="raidTable" class="w-full border-collapse text-xs sm:text-sm">
      <thead>
        <tr>
          <th class="raid-table-header raid-table-header-sticky">Player Name</th>
          <th class="raid-table-header">Avg Estimate</th>
          {last5RaidDates.map((raidDate: string) => {
            const raidAverage = raidAverages[raidDate];
            return (
              <th class="raid-table-header">
                <span set:html={`${formatDate(raidDate)}<br><small class="text-gray-400">(Ã˜ ${new Intl.NumberFormat('de-DE').format(Math.round(raidAverage))})</small>`} />
              </th>
            );
          })}
          <th class="raid-table-header">Max/Est</th>
        </tr>
      </thead>
      <tbody id="raidTableBody">
        {sortedPlayersData.map((player: any) => {
          const maxEstPercentage = player.avgEstimate > 0 ? ((player.bestScore / player.avgEstimate) * 100) : 0;
          return (
            <tr class="raid-table-row" data-name={player.name} data-avgestimate={player.avgEstimate} data-maxest={maxEstPercentage}>
              <td class="raid-table-cell raid-table-cell-sticky">{player.name}</td>
              <td class="raid-table-cell raid-table-cell-center">{new Intl.NumberFormat('de-DE').format(Math.round(player.avgEstimate))}</td>
              {last5RaidDates.map((raidDate: string) => {
                const score = player.raids[raidDate];
                
                if (score === undefined) {
                  // Player was not in guild at this time - show gray
                  return <td class="raid-table-cell raid-table-cell-center text-gray-500">-</td>;
                } else if (score === null) {
                  // Player was in guild but didn't participate - show red
                  return <td class="raid-table-cell status-poor">-</td>;
                } else {
                  // Player participated - show with color coding based on their personal efficiency
                  const playerStat = allPlayerStats.find((p: any) => p.name === player.name);
                  const raidEntry = playerStat?.last5Raids.find((r: any) => r.date === raidDate);
                  const estimatedScore = raidEntry?.estimatedScore || 0;
                  const raidEfficiency = estimatedScore > 0 ? ((score / estimatedScore) * 100) : 100;
                  const percentageClass = getPercentageClass(raidEfficiency);
                  
                  return (
                    <td class={`raid-table-cell ${percentageClass}`}>
                      {new Intl.NumberFormat('de-DE').format(score)} ({raidEfficiency.toFixed(0)}%)
                    </td>
                  );
                }
              })}
              <td class={`raid-table-cell ${getPercentageClass(maxEstPercentage)}`}>
                {maxEstPercentage.toFixed(0)}%
              </td>
            </tr>
          );
        })}
        
        <!-- Footer row with totals -->
        <tr class="raid-table-footer">
          <td class="raid-table-cell raid-table-cell-sticky">ðŸ“Š TOTAL ({allPlayersData.length} players)</td>
          <td class="raid-table-cell raid-table-cell-center">{new Intl.NumberFormat('de-DE').format(Math.round(totalAvgEstimate))}</td>
          {last5RaidDates.map((raidDate: string) => (
            <td class="raid-table-cell raid-table-cell-center">{new Intl.NumberFormat('de-DE').format(raidTotals[raidDate])}</td>
          ))}
          <td class={`raid-table-cell ${getPercentageClass(avgMaxEstPercentage)}`}>
            {avgMaxEstPercentage.toFixed(0)}%
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="mt-3 sm:mt-4 text-center text-gray-400 text-xs sm:text-sm">
    <p><strong>Legend:</strong> <span class="bg-green-500/80 text-white px-2 py-1 rounded">Green = Good (&gt;95%)</span> â€¢ <span class="bg-yellow-500/80 text-white px-2 py-1 rounded">Yellow = Average (80-95%)</span> â€¢ <span class="bg-orange-500/80 text-white px-2 py-1 rounded">Orange = Below Average (70-80%)</span> â€¢ <span class="bg-red-600/80 text-white px-2 py-1 rounded">Red = Poor (&lt;70%)</span> â€¢ <span class="text-gray-500">Gray = Did Not Participate</span> â€¢ Max/Est = Best Score / Max Estimated</p>
  </div>
</div>

<script>
  function sortRaidTable() {
    const sortBy = (document.getElementById('raidTableSort') as HTMLSelectElement).value;
    const tbody = document.getElementById('raidTableBody') as HTMLTableSectionElement;
    const rows = Array.from(tbody.querySelectorAll('tr:not(.raid-table-footer)')) as HTMLTableRowElement[];
    const footerRow = tbody.querySelector('.raid-table-footer') as HTMLTableRowElement;
    
    rows.sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return (a.dataset.name || '').localeCompare(b.dataset.name || '');
        case 'avgEstimate':
          return parseFloat(b.dataset.avgestimate || '0') - parseFloat(a.dataset.avgestimate || '0');
        case 'maxEst':
          return parseFloat(b.dataset.maxest || '0') - parseFloat(a.dataset.maxest || '0');
        default:
          return 0;
      }
    });
    
    // Clear tbody and re-append sorted rows
    tbody.innerHTML = '';
    rows.forEach(row => tbody.appendChild(row));
    // Re-append footer row at the end
    tbody.appendChild(footerRow);
  }
  
  // Make function globally available
  (window as any).sortRaidTable = sortRaidTable;
</script>
